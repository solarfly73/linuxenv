[user]
    name = Derek Douville
    email = derekd73@gmail.com
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto
[github]
    user = solarfly73
[sendemail]
    suppressfrom = true
[merge]
    tool = vimdiff
    #ff = only
[svn]
    rmdir = true
[alias]
    # Console gitview replacement
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

    # Find the best name for the current branch
    current-branch = !"f() { branch_name=$(git symbolic-ref -q HEAD); branch_name=${branch_name##refs/heads/}; branch_name=${branch_name:-HEAD}; echo $branch_name; }; f"

    # Given a commit id, does an svn dcommit on that commit and parents. Doesn't use git checkout - because dcommit can change branches.
    svn-push-cherry = !"f() { set -x; safe=__safe-$RANDOM; current=$(git current-branch); git svn rebase && git checkout -b $safe $1 && git svn dcommit && git checkout ${current} && git svn rebase && git branch -d $safe; set +x; }; f"

    # Some short versions
    s = status
    ap = add -p
    ri = rebase --interactive

    # Show absolute top of repo
    top = !"(cd \"`git rev-parse --git-dir`\" && cd .. && pwd)"

    pruneall = !"f() { git remote prune $(git remote) $*; }; f"

    fromdate = !"f() { a=$(git log --all --pretty='format:%H' --until=\"@{${1}}\" | head -n1); echo $a; }; f"
#    pushv    = !"f() { git push -vvvn \"$@\" && echo -n '\nok (y/N)? ' && read ok && test x\"$ok\" = 'xy' && echo git push -vvv \"$@\" || echo 'skipping push'; }; f"
    date = log --pretty='format:%ad'

    rebase-prep = !"f() { git rebase -i $(git merge-base HEAD $1); }; f"

    prune-remote-helper = !"f() { git branch -a --merged ${2:+$2}  | grep remotes/${1:?[\nusage: git prune-remote <remote> [branch]]}/ | cut -d / -f 3- | grep -v '^master$'; }; f"
    prune-remote-pretend = !"f() { git prune-remote-helper $* | xargs git push --delete -n $1; }; f"
    prune-remote = !"f() { git prune-remote-helper $* | xargs git push --delete $1; }; f"

    review = !sh `git rev-parse --show-toplevel`/tools/rfc.sh

    since-last-merge = !"f() { git log -p --reverse $(git merge-base ${1:?[git since-last-merge <oldbranch> <newbranch>} ${2:?[git since-last-merge <oldbranch> <newbranch>]})..$2; }; f"

    oldbranches = for-each-ref --sort='-authordate' --format='%(authordate:iso8601) %(refname:short)' refs/heads
    savage-sequence = !"f() { git test-sequence ${1:-piston/master}..${2:-HEAD} './install-packages.sh && ./run_tests.py -1'; }; f"

[log]
    date = local
[push]
    default = simple
[core]
    excludesfile = ~/.gitexcludes
[branch]
    autosetuprebase = always
[gitreview]
    username = novas0x2a
[diff]
    algorithm = histogram
[gc]
    reflogexpire = never
    reflogexpireunreachable = never
    auto = 0
